name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  ACL_PATHS: "services/acl-service/"
  FILES_SERVICE_PATHS: "services/files/"
  EMAIL_SERVICE_PATHS: "services/email/"
  LIB_PATHS: "lib/"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_service_changes:
    runs-on: ubuntu-latest
    # needs: [build]
    outputs:
      acl_service_should_deploy: ${{ steps.confirm_changes.outputs.ACL_SHOULD_DEPLOY }}
      files_service_should_deploy: ${{ steps.confirm_changes.outputs.FILES_SHOULD_DEPLOY }}
      email_service_should_deploy: ${{ steps.confirm_changes.outputs.EMAIL_SERVICE_SHOULD_DEPLOY }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: file_changes
        name: Check for Service Changes
        run: |
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.sha }}"
          files_temp=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          files=$(echo "$files_temp" | tr "\n" " ")
          echo "changed_files=$files" >> "$GITHUB_OUTPUT"

      - id: confirm_changes
        name: Confirm Changes
        shell: bash
        run: |
          echo "Changed files: ${{ steps.file_changes.outputs.changed_files }}"
          echo "If you see here files that you have not modified, please update your branch with changes from main."

          # Check if the modified files include this path
          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.ACL_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.ACL_PATHS }}"
            echo "ACL_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "ACL_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.FILES_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.FILES_SERVICE_PATHS }}"
            echo "FILES_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "FILES_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.EMAIL_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.EMAIL_SERVICE_PATHS }}"
            echo "EMAIL_SERVICE_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "EMAIL_SERVICE_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          exit 0

  build_and_deploy_acl:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.acl_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #   version: "lab:latest"
        #   driver: cloud
        #   endpoint: "elonaire/elonaire-builder"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          # push: true
          tags: elonaire/acl-service:latest
          build-args: |
            SERVICE_NAME=acl-service
            GRPC_PORT=50051
            PORT=3007
          platform: ${{ matrix.platform }}
          provenance: true # enables --provenance=mode=max
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      # - name: Build the Docker image
      #   run: |
      #     docker buildx build --platform linux/amd64,linux/arm64 --build-arg SERVICE_NAME=acl-service --build-arg PORT=3007 --build-arg GRPC_PORT=50051 -t elonaire/acl-service:latest --provenance=mode=max --sbom=true --push .

  build_and_deploy_email_service:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.email_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #   version: "lab:latest"
        #   driver: cloud
        #   endpoint: "elonaire/elonaire-builder"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          # push: true
          tags: elonaire/email-service:latest
          build-args: |
            SERVICE_NAME=email
            GRPC_PORT=50052
            PORT=3019
          platform: ${{ matrix.platform }}
          provenance: true # enables --provenance=mode=max
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      # - name: Build the Docker image
      #   run: |
      #     docker buildx build --platform linux/amd64,linux/arm64 --build-arg SERVICE_NAME=email --build-arg PORT=3019 --build-arg GRPC_PORT=50052 -t elonaire/email-service:latest --provenance=mode=max --sbom=true --push .

  build_and_deploy_files:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.files_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #   version: "lab:latest"
        #   driver: cloud
        #   endpoint: "elonaire/elonaire-builder"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          # push: true
          tags: elonaire/files-service:latest
          build-args: |
            SERVICE_NAME=files
            GRPC_PORT=50053
            PORT=3001
          platform: ${{ matrix.platform }}
          provenance: true # enables --provenance=mode=max
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      # - name: Build the Docker image
      #   run: |
      #     docker buildx build --platform linux/amd64,linux/arm64 --build-arg SERVICE_NAME=files --build-arg PORT=3001 --build-arg GRPC_PORT=50053 -t elonaire/files-service:latest --provenance=mode=max --sbom=true --push .

  automerge:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    needs:
      [
        build_and_deploy_acl,
        build_and_deploy_email_service,
        build_and_deploy_files,
      ]
    if: |
      always() &&
      (needs.build_and_deploy_acl.result != 'failure' &&
      needs.build_and_deploy_files.result != 'failure' &&
      needs.build_and_deploy_email_service != 'failure')

    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.16.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
