upstream tt-acl-service {
    server tt-acl-service:3001;
    server tt-acl-service:3002;
    server tt-acl-service:3003;
    server tt-acl-service:3004;
    server tt-acl-service:3005;
    server tt-acl-service:3006;
    server tt-acl-service:3007;
    server tt-acl-service:3008;
    server tt-acl-service:3009;
    server tt-acl-service:3010;
    keepalive_time 300s;
}

upstream tt-shared-service {
    server tt-shared-service:3011;
    server tt-shared-service:3012;
    server tt-shared-service:3013;
    server tt-shared-service:3014;
    server tt-shared-service:3015;
    server tt-shared-service:3016;
    server tt-shared-service:3017;
    server tt-shared-service:3018;
    server tt-shared-service:3019;
    server tt-shared-service:3020;
    keepalive_time 300s;
}

upstream tt-frontend {
    server tt-frontend:8080;
    server tt-frontend:8081;
    server tt-frontend:8082;
    server tt-frontend:8083;
    server tt-frontend:8084;
    server tt-frontend:8085;
    server tt-frontend:8086;
    server tt-frontend:8087;
    server tt-frontend:8088;
    server tt-frontend:8089;
    keepalive_time 300s;
}

server {
    # for HTTPS
    listen 443-452 ssl;
    http2 on;
    # listen [::]:443 ssl http2;
    server_name techietenka.com;

    ssl_certificate /etc/nginx/certs/techietenka_com.crt;
    ssl_certificate_key /etc/nginx/certs/techietenka_com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    client_max_body_size 10M;
    proxy_read_timeout 300s;
    allow all;


    # location / {
    #     proxy_pass http://tt-frontend/;
    # }
    
    location / {
        limit_except GET POST OPTIONS {
               deny all;
        }
        # rewrite ^/tt-frontend/(.*) /$1 break;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_pass http://tt-frontend/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_pass_header Server;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        proxy_connect_timeout 75s;
        proxy_read_timeout 300s;
    }

    location /tt-acl-service {
        limit_except GET POST OPTIONS {
               deny all;
        }
        rewrite ^/tt-acl-service/(.*) /$1 break;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_pass http://tt-acl-service/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_pass_header Server;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        proxy_connect_timeout 75s;
        proxy_read_timeout 300s;
    }

    location /tt-shared-service {
        limit_except GET POST OPTIONS {
               deny all;
        }
        rewrite ^/tt-shared-service/(.*) /$1 break;
        proxy_buffering off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_pass http://tt-shared-service/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_pass_header Server;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        proxy_connect_timeout 75s;
        proxy_read_timeout 300s;
        client_max_body_size 0;
    }
}

# for HTTPS
server {
    listen 80-89;
    # listen [::]:80;
    server_name techietenka.com;
    return 301 https://$host$request_uri;
}
